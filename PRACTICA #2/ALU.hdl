// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
	   // Asignamos y manejamos zx y zy con ayuda del multiplexor para reconocer que hacer, si debe hacer o no 0 la entrada, si es 0 o es 1 cada una de ellas
	   // el selector de cada multiplexor seran los bits de control zx y zy respectivamente, manejamos mux16 por que las entradas x y son de 16bits
	   Mux16(a=x,b=false,sel=zx,out=xMultiOut);  // la entrada a seran los 16 bits de x, & la entraba b sera una constante 0 en sus 16 bits, para el correcto funcionamiento del multiplexor
	   Mux16(a=y, b=false, sel=zy, out=yMultiOut); // Igual con la entrada y
	   
	   //Asignamos y manejamos nx y ny con ayuda del multiplexor 16 bits para reconocer si el numero de entrada debe negarlo o no, dependiendo de si es 0 o 1,
	   //su selector que es el que controlara ello los cuales son nx y ny, como entrada tomamos las salidas del anterior procedimiento de multiplexores con x & y
		Not16(in=xMultiOut, out=negX); // Lo usamos en caso de que deba negar la entrada dependiendo del multiplexor
		Mux16(a=xMultiOut,b=negX,sel=nx,out=procX); //Saber si debe negar la entrada y como salida da el numero x ya procesado
		
		//Lo mismo pero con la entrada y selectores de y
		Not16(in=yMultiOut, out=negY);
		Mux16(a=yMultiOut, b=negY, sel=ny, out=procY);
		
		// la entrada f controlara el manejo de la funcion a utilizar, si es x+y (si f=1) or x&y (si f=0)
		And16(a=procX, b=procY, out=andOut); // Para la operacion x&y
		Add16(a=procX, b=procY, out=addOut); // Para la operacion x + y
		// Debemos pasarlo por un multiplexor para saber cual de ambas operaciones realizar dependiendo de f que es el selector
		Mux16(a=andOut, b=addOut, sel=f, out=fOut);
		
		//Ahora la salida de la funcion la pasamos por un multiplexor para saber si debe negar su salida o no, dependiendo del selector "no" y de sus valores internos
		 
		Not16(in=fOut, out=fNotOut); // Compuerta para negar la funcion
		Mux16(a=fOut, b=fNotOut, sel=no,out=out,out[0..7]=zr0,out[8..15]=zr1,out[15]=ng); //Sin embargo necesitaremos el bit mas significativo, el out[15] para activar en dado caso ng
																		//estas banderas funcionaran para saber si el resultado es menor o no que 0, se activa si (out<0)
																		//Tambien necesitaremos dividir los bits en 2 partes para pasarlos por 2 compuertas or8way 1 Or y saber si el 
																		//resultado dio 0 para activar zr o sino para activar ng el cual depende tambien del selector "no", en dado caso de que 
																		//el resultado sea positivo o negativo
		Or8Way(in=zr0,out=or1Out);
		Or8Way(in=zr1, out=or2Out);
		Or(a=or1Out, b=or2Out, out=or3Out);
		Not(in=or3Out, out=zr);
   
}