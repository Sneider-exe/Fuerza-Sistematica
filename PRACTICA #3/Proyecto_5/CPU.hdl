// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	 // Multiplexor que selecciona si la instruccion es de tipo A (instruction[15] = 0)
    // o de tipo C (instruction[15] = 1), y asigna los bits correspondientes para
    // definir los diferentes campos de una instruccion C.
    Mux16(a=false, b=instruction, sel=instruction[15], 
    out[0]=cJGT,      // Bit para la condicion de salto: Jump if Greater Than (JGT).
    out[1]=cJEQ,      // Bit para la condicion de salto: Jump if Equal (JEQ).
    out[2]=cJLT,      // Bit para la condicion de salto: Jump if Less Than (JLT).
    out[3]=cDestM,    // Bit de destino: indica si se almacena el resultado en M.
    out[3]=writeM,    // Igual que cDestM, controla la escritura en la memoria.
    out[4]=cDestD,    // Bit de destino: indica si se almacena el resultado en el registro D.
    out[5]=cDestA,    // Bit de destino: indica si se almacena el resultado en el registro A.
    out[6]=cAluNo,    // Bit de control para la ALU: controla la operacion logica de la ALU.
    out[7]=cAluF,     // Bit de control para la ALU: controla si realiza una suma o una operacion logica.
    out[8]=cAluNy,    // Bit de control para la ALU: niega el operando Y.
    out[9]=cAluZy,    // Bit de control para la ALU: pone el operando Y en 0.
    out[10]=cAluNx,   // Bit de control para la ALU: niega el operando X.
    out[11]=cAluZx,   // Bit de control para la ALU: pone el operando X en 0.
    out[12]=cAOrM,    // Bit que selecciona si se usa el valor A o M como operando para la ALU.
    // Los bits 13 y 14 no son usados.
    out[15]=cType);   // Bit de tipo: 0 para A-instruction, 1 para C-instruction.
    
    // ALU (Unidad Aritmética Logica) que realiza operaciones entre xIn e yIn.
    // Los bits de control definen la operacion (como negacion, suma, etc.).
    ALU(x=xIn, y=yIn, zx=cAluZx, nx=cAluNx, zy=cAluZy, ny=cAluNy,
     f=cAluF, no=cAluNo, out=aluOut, out=outM, zr=zerop, ng=negp);

    // Comparador: realiza operaciones de comparacion entre los resultados de la ALU.
    Or(a=zerop, b=negp, out=lteq);   // Salida positiva o negativa.
    Not(in=lteq, out=posp);          // Si el valor no es 0 ni negativo, es positivo.

    // Registro A: almacena direcciones de memoria o valores inmediatos.
    Mux16(a=instruction, b=aluOut, sel=cType, out=aMuxOut); // Mux que decide qué valor cargar en A.
    Mux16(a=aRegOut, b=inM, sel=cAOrM, out=yIn);            // Selecciona entre A o M para operar en la ALU.
    
    // Logica para cargar el valor en el registro A. Si la instruccion es de tipo A, 
    // o el destino es A en una instruccion C, carga el valor en el registro A.
    Not(in=cType, out=notCType);     // Invierte el bit de tipo de instruccion.
    Or(a=notCType, b=cDestA, out=loadA); // Si es A-instruction o destino es A, carga el valor en A.
    ARegister(in=aMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM); // Registra A almacena el valor.
    
    // Registro D: almacena el resultado de operaciones.
    DRegister(in=aluOut, load=cDestD, out=xIn);  // Si el destino es D, carga el valor en D.

    // Logica de saltos condicionales:
    And(a=cJEQ, b=zerop, out=JEQ);   // Salto si es igual a 0 (JEQ).
    And(a=cJLT, b=negp, out=JLT);    // Salto si es negativo (JLT).
    And(a=cJGT, b=posp, out=JGT);    // Salto si es positivo (JGT).
    Or(a=JEQ, b=JLT, out=JLE);       // Salta si es menor o igual.
    Or(a=JLE, b=JGT, out=jump);      // Salta si cumple alguna de las condiciones anteriores.

    // Contador de programa (PC): almacena la direccion de la siguiente instruccion a ejecutar.
    // Si jump es verdadero, carga la direccion almacenada en el registro A, de lo contrario
    // simplemente incrementa el contador. Si reset es 1, reinicia el PC a 0.
    PC(in=aRegOut, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}
